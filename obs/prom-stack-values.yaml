prometheus:
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    enableFeatures:
      - exemplar-storage
    enableRemoteWriteReceiver: true
    additionalScrapeConfigs:
      - job_name: 'senik'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'host.k3d.internal:8080' ] # TODO no security here
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: local-path-retain
          resources:
            requests:
              storage: 2Gi
  ingress:
    enabled: true
    hosts:
      - prometheus.127.0.0.1.nip.io
grafana:
  ingress:
    enabled: true
    hosts:
      - grafana.127.0.0.1.nip.io

  sidecar:
    datasources:
      exemplarTraceIdDestinations:
        datasourceUid: tempo
        traceIdLabelName: trace_id

  additionalDataSources:
    - name: loki
      type: loki
      access: proxy
      orgId: 1
      url: http://loki-headless:3100
      basicAuth: false
      editable: false
      jsonData:
        derivedFields:
          - datasourceUid: tempo
            matcherRegex: \[{.+,(.+?),.+}] # to match trace id in pattern:  "user: %X{userId} %5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
            name: TraceID
            url: $${__value.raw}
    - name: Tempo
      type: tempo
      access: proxy
      orgId: 1
      url: http://snk-tempo-service:3200
      basicAuth: false
      version: 1
      editable: false
      apiVersion: 1
      uid: tempo
      jsonData:
        httpMethod: GET
        tracesToLogs:
          datasourceUid: 'loki'
          mappedTags: [ { key: 'service.name',value: 'app' } ]  # maps the tracing tag named service.name to the log label named app
          mapTagNamesEnabled: true # that was required!
          filterByTraceID: true
          filterBySpanID: true
          spanStartTimeShift: '-1h'
          spanEndTimeShift: '1h'
        lokiSearch:
          datasourceUid: 'loki'
        tracesToMetrics:
          datasourceUid: prometheus # TODO this works but the queries do not make sense
          tags: [ { key: "service.name", value: "app" } ]
          queries:
            - name: 'Throughput'
              query: 'sum(rate(http_server_requests_seconds_count{$$__tags}[$$__interval]))'
            - name: 'Latency'
              query: 'http_server_requests_seconds_max{$$__tags}'
        serviceMap:
          datasourceUid: 'prometheus' # TODO this is still not working
        nodeGraph:
          enabled: true



  persistence:
    type: pvc
    enabled: true
    storageClassName: local-path-retain
    accessModes:
      - ReadWriteOnce
    size: 2Gi
    # annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    # selectorLabels: {}
    # subPath: ""
    existingClaim: snk-prom-grafana # reuse!
    # extraPvcLabels: {}
