version: "3"
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # required

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092" # internal
      - "9093:9093" # external
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # probably default
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # default is 3
      EXTRA_ARGS:
        -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.16.1.jar=1234:/usr/share/jmx-exporter/kafka_broker.yml
    #        -Djava.util.logging.config.file=/usr/share/jmx-exporter/exporter_debug_logging.properties
    volumes:
      - ./obs/jmx-exporter/:/usr/share/jmx-exporter

  connect:
    image: debezium/connect:latest
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - db
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: senik-debezium-connect-group
      # optional vars:
      CONFIG_STORAGE_TOPIC: senik-debezium-config
      OFFSET_STORAGE_TOPIC: senik-debezium-offsets
      STATUS_STORAGE_TOPIC: senik-debezium-status
    volumes:
      - ./scripts:/scripts
    command: [ "/bin/sh", "/scripts/create-postgres-connect-source.sh" ]

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
      DYNAMIC_CONFIG_ENABLED: 'true'

#  sonarqube:
#    image: sonarqube:community
#    depends_on:
#      - sonarqube-db
#    environment:
#      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
#      SONAR_JDBC_USERNAME: sonar
#      SONAR_JDBC_PASSWORD: sonar
#      # bypass error: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
#      sonar.search.javaAdditionalOpts: "-Dnode.store.allow_mmap=false"
#    volumes:
#      - sonarqube_data:/opt/sonarqube/data
#      - sonarqube_extensions:/opt/sonarqube/extensions
#      - sonarqube_logs:/opt/sonarqube/logs
#    ports:
#      - "9000:9000"
#  sonarqube-db:
#    image: postgres:12
#    environment:
#      POSTGRES_USER: sonar
#      POSTGRES_PASSWORD: sonar
#    volumes:
#      - postgresql:/var/lib/postgresql
#      - postgresql_data:/var/lib/postgresql/data

#volumes:
#  sonarqube_data:
#  sonarqube_extensions:
#  sonarqube_logs:
#  postgresql:
#  postgresql_data:

networks:
  infra-net:
